{"ast":null,"code":"const baseUrl = process.env.REACT_APP_URL;\n\nclass DataServiceAppend {\n  constructor() {\n    this.currentUrl = baseUrl;\n  }\n\n  getFood(food) {\n    food = encodeURI(food.toLowerCase());\n\n    if (this.currentUrl.match(/q=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/q=([^&]*)/, `q=${food}`);\n    } else if (!food) {\n      this.currentUrl = this.currentUrl.replace(/&q=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&q=${food}`;\n    }\n\n    return this.currentUrl;\n  }\n\n  getCuisine(cuisine) {\n    cuisine = encodeURI(cuisine.toLowerCase());\n\n    if (this.currentUrl.match(/cuisineType=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/cuisineType=([^&]*)/, `cuisineType=${cuisine}`);\n    } else if (!cuisine) {\n      this.currentUrl = this.currentUrl.replace(/&cuisineType=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&cuisineType=${cuisine}`;\n    }\n\n    return this.currentUrl;\n  }\n\n  getDishType(dishType) {\n    dishType = encodeURI(dishType.toLowerCase());\n\n    if (this.currentUrl.match(/dishType=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/dishType=([^&]*)/, `dishType=${dishType}`);\n    } else if (!dishType) {\n      this.currentUrl = this.currentUrl.replace(/&dishType=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&dishType=${dishType}`;\n    }\n\n    return this.currentUrl;\n  }\n\n  getMealType(mealType) {\n    mealType = encodeURI(mealType.toLowerCase());\n\n    if (this.currentUrl.match(/mealType=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/mealType=([^&]*)/, `mealType=${mealType}`);\n    } else if (!mealType) {\n      this.currentUrl = this.currentUrl.replace(/&mealType=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&mealType=${mealType}`;\n    }\n\n    return this.currentUrl;\n  }\n\n  getDiet(diet) {\n    diet = encodeURI(diet.toLowerCase());\n\n    if (this.currentUrl.match(/diet=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/diet=([^&]*)/, `diet=${diet}`);\n    } else if (!diet) {\n      this.currentUrl = this.currentUrl.replace(/&diet=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&diet=${diet}`;\n    }\n\n    return this.currentUrl;\n  }\n\n  getHealth(health) {\n    health = encodeURI(health.toLowerCase());\n\n    if (this.currentUrl.match(/health=([^&]*)/)) {\n      this.currentUrl = this.currentUrl.replace(/health=([^&]*)/, `health=${health}`);\n    } else if (!health) {\n      this.currentUrl = this.currentUrl.replace(/&health=([^&]*)/, '');\n    } else {\n      this.currentUrl += `&health=${health}`;\n    }\n\n    return this.currentUrl;\n  }\n\n}\n\nexport default new DataServiceAppend();","map":{"version":3,"sources":["/Users/HARRY2/Documents/projects/make-a-dish/frontend/src/services/recipes.js"],"names":["baseUrl","process","env","REACT_APP_URL","DataServiceAppend","currentUrl","getFood","food","encodeURI","toLowerCase","match","replace","getCuisine","cuisine","getDishType","dishType","getMealType","mealType","getDiet","diet","getHealth","health"],"mappings":"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","sourcesContent":["const baseUrl = process.env.REACT_APP_URL;\n\nclass DataServiceAppend {\n    currentUrl = baseUrl;\n    \n    getFood(food) {\n        food = encodeURI(food.toLowerCase())\n        if (this.currentUrl.match(/q=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/q=([^&]*)/, `q=${food}`);\n        } else if (!food) {\n            this.currentUrl = this.currentUrl.replace(/&q=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&q=${food}`;\n        }\n        return this.currentUrl;\n    }\n\n    getCuisine(cuisine) {\n        cuisine = encodeURI(cuisine.toLowerCase())\n        if (this.currentUrl.match(/cuisineType=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/cuisineType=([^&]*)/, `cuisineType=${cuisine}`);\n        } else if (!cuisine) {\n            this.currentUrl = this.currentUrl.replace(/&cuisineType=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&cuisineType=${cuisine}`;\n        }\n        return this.currentUrl;\n    }\n    \n    getDishType(dishType) {\n        dishType = encodeURI(dishType.toLowerCase())\n        if (this.currentUrl.match(/dishType=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/dishType=([^&]*)/, `dishType=${dishType}`);\n        } else if (!dishType) {\n            this.currentUrl = this.currentUrl.replace(/&dishType=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&dishType=${dishType}`;\n        }\n        return this.currentUrl;\n    }\n\n    getMealType(mealType) {\n        mealType = encodeURI(mealType.toLowerCase())\n        if (this.currentUrl.match(/mealType=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/mealType=([^&]*)/, `mealType=${mealType}`);\n        } else if (!mealType) {\n            this.currentUrl = this.currentUrl.replace(/&mealType=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&mealType=${mealType}`;\n        }\n        return this.currentUrl;\n    }\n\n    getDiet(diet) {\n        diet = encodeURI(diet.toLowerCase())\n        if (this.currentUrl.match(/diet=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/diet=([^&]*)/, `diet=${diet}`);\n        } else if (!diet) {\n            this.currentUrl = this.currentUrl.replace(/&diet=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&diet=${diet}`;\n        }        \n        return this.currentUrl;\n    }\n\n    getHealth(health) {\n        health = encodeURI(health.toLowerCase());\n        if (this.currentUrl.match(/health=([^&]*)/)) {\n            this.currentUrl = this.currentUrl.replace(/health=([^&]*)/, `health=${health}`);\n        } else if (!health) {\n            this.currentUrl = this.currentUrl.replace(/&health=([^&]*)/, '');\n        } else {\n            this.currentUrl += `&health=${health}`;\n        }        \n        return this.currentUrl;\n    }\n}\n\nexport default new DataServiceAppend();"]},"metadata":{},"sourceType":"module"}